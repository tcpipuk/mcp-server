tools:
  sandbox:
    description: >
      Access a bash shell in a persistent sandbox environment that lets you help the user
      by running commands, writing code, and managing files. Everything persists between
      commands in /workspace, so you can build up complex solutions over multiple steps.

      Core capabilities:
      - Python 3.13 with pandas/numpy for data analysis and calculations
      - Network tools (aiodns, aiohttp, beautifulsoup4, requests) for targeted web tasks
      - Development tools (git, ruff) for managing and checking code
      - System tools (curl, dig, host, ping, screen, tree, wget) for investigation

      When to use this tool:
      - Running Python code to demonstrate concepts or calculate results
      - Investigating network/system issues that need multiple commands
      - Building up complex solutions that need persistent storage
      - Testing and improving code quality with linting/formatting
      - Managing long-running tasks with screen sessions

      Best practices for Python:
      - Write code to files rather than direct execution for better maintainability
      - Use pandas/numpy for data analysis instead of manual calculations
      - Check code quality with ruff:
        `ruff check --select ALL --ignore COM812,CPY,D203,D213,FBT,RUF029,RUF100 --fix --unsafe-fixes script.py`
      - Format consistently:
        `ruff format --line-length 100 --skip-magic-trailing-comma true script.py`
      - For general web access, prefer the separate 'web' tool - use this sandbox's
        network capabilities only for specific development or investigation tasks

      Managing the workspace:
      - Use locations under /workspace for all files (each new session starts in this
        working folder unless you've resumed a `screen` session)
      - Create descriptive subfolders for different projects/tasks
      - Store documentation and notes for yourself in the future in /workspace/notes
      - Clean up temporary files and old screen sessions
      - Use `screen` with descriptive session names for long-running tasks
      - Keep timeouts short (2-5s) as tool waits for full duration
      - Split complex operations into multiple commands for better feedback
    inputSchema:
      type: object
      properties:
        command:
          type: string
          description:
            Commands to execute. Multiple lines will be submitted as provided.
            For Python, use 'python3' or create .py files to run.
        timeout:
          type: integer
          default: 5
          description:
            Time to wait for output in seconds. Use shorter timeouts (2-5s)
            and multiple commands for better responsiveness.
      required: ["command"]

  web:
    description: >
      Your knowledge is out of date and potentially flawed. This tool lets you access and
      process web content to enhance your responses. Use this tool to:
      - Check current documentation when answering questions
      - Fetch example code or data to demonstrate solutions
      - Navigate through documentation using extracted links
      - Verify information before making recommendations
    inputSchema:
      type: object
      properties:
        url:
          type: string
          description: URL to access - could be a web page, API endpoint, or a
            file on GitHub, etc.
        mode:
          type: string
          enum:
            - markdown
            - raw
            - links
          default: markdown
          description: >
            How to process the content:
            - `markdown` converts HTML to clean markdown (best for reading)
            - `raw` gets unprocessed content (for non-HTML such as code, JSON, etc)
            - `links` extracts hyperlinks from a webpage with anchor text
        max_length:
          type: integer
          default: 0
          description: Limit response length in characters (zero means no limit)
      required: ["url"]
