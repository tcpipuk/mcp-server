tools:
  python:
    description: >
      Execute code in a Python 3.13 sandbox to demonstrate concepts and calculate results.
      Instead of writing example code for users to run, use this tool directly to:
      - Show pandas/numpy operations with real data
      - Calculate results that would be tedious manually
      - Demonstrate and verify working code examples

      Includes: numpy, pandas, requests, bs4, aiodns, aiohttp. Can either run code or lint
      with Ruff. When showing code or output to users, format it appropriately in markdown.
    inputSchema:
      type: object
      properties:
        code:
          type: string
          description: Python code to use
        time_limit:
          type: integer
          default: 10
          description: Timeout in seconds for execution (ignored when linting)
        lint:
          type: boolean
          default: false
          description: Lint the code using Ruff instead of executing it
      required: ["code"]

  web:
    description: >
      Your knowledge is out of date and potentially flawed. This tool lets you access and
      process web content to enhance your responses. Use this tool to:
      - Check current documentation when answering questions
      - Fetch example code or data to demonstrate solutions
      - Navigate through documentation using extracted links
      - Verify information before making recommendations
    inputSchema:
      type: object
      properties:
        url:
          type: string
          description: URL to access - could be a web page, API endpoint, or a file on GitHub, etc.
        mode:
          type: string
          enum:
            - markdown
            - raw
            - links
          default: markdown
          description: >
            How to process the content:
            - `markdown` converts HTML to clean markdown (best for reading)
            - `raw` gets unprocessed content (for non-HTML such as code, JSON, etc)
            - `links` extracts hyperlinks from a webpage with anchor text
        max_length:
          type: integer
          default: 0
          description: Limit response length in characters (zero means no limit)
      required: ["url"]

  workspace_git:
    description: >
      Run git commands in the workspace. Useful for cloning repositories, managing
      branches, committing changes, etc. Authentication for SSH operations uses the
      provided private key.
    inputSchema:
      type: object
      properties:
        command:
          type: string
          description: Full git command to run (e.g. "git clone git@github.com:user/repo.git")
        cwd:
          type: string
          description: Working directory for the command, relative to workspace root
          default: "."
      required: ["command"]

  workspace_read:
    description: >
      Read the contents of one or more files from the workspace. Files are returned
      with their paths and contents. Large files can be limited using max_length.
    inputSchema:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
          description: List of file paths to read relative to workspace root
        max_length:
          type: integer
          default: 65535
          description: Maximum bytes to truncate (default 64KiB, 0 means no limit)
      required: ["files"]

  workspace_tree:
    description: >
      List files and directories in the workspace, similar to the Unix tree command.
      Outputs JSON format for easier parsing. Respects .gitignore and hides .git
      directory to save space.
    inputSchema:
      type: object
      properties:
        path:
          type: string
          description: Optional subdirectory within workspace to list (defaults to workspace root)
          default: "."
      required: []

  workspace_write:
    description: >
      Write or update a file in the workspace. Can either overwrite the entire file
      or apply a diff patch. Creates parent directories if needed.
    inputSchema:
      type: object
      properties:
        path:
          type: string
          description: Path to write to, relative to workspace root
        content:
          type: string
          description: >
            New file content (for overwrite mode) or unified diff patch (for patch mode).
            Patches must include @@ line(s) and match current content correctly.
        mode:
          type: string
          enum: ["overwrite", "patch"]
          default: "overwrite"
          description: Whether to overwrite the file or apply content as a diff patch
      required: ["path", "content"]
